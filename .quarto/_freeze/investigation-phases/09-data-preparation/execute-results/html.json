{
  "hash": "c05bb4537cf3e7297477f1719fdb7f0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preparation\"\neditor_options: \n  chunk_output_type: console\nexecute:\n  message: false\n  warning: false\n---\n\n\n\n\n    \n## Setting up the environment\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Tools for modeling\nlibrary(tidymodels)\n\n## Tools to explore correlations\nlibrary(corrr)\nlibrary(ggtext)\nlibrary(glue)\nlibrary(scales)\n\n## To manage relative paths\nlibrary(here)\n\n## To transform data that fits in RAM\nlibrary(data.table)\nlibrary(lubridate)\nlibrary(timeDate)\n\n## Custom functions\ndevtools::load_all()\n\nparams <- yaml::read_yaml(here(\"params.yml\"))\n```\n:::\n\n\n\n\n## Importing data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAcsVariablesByZoneId <- fst::read_fst(\n  here(\"output/AcsVariablesByZoneId.fst\"),\n  as.data.table = TRUE\n)\n\nOmsDensityFeatures <- fst::read_fst(\n  here(\"output/OmsDensityFeatures.fst\"),\n  as.data.table = TRUE\n)\n\nZoneCodesRef <-\n  fread(here(\"raw-data/taxi_zone_lookup.csv\"),\n        select = c(\"LocationID\" = \"integer\",\n                   \"Borough\" = \"character\",\n                   \"service_zone\" = \"character\"))\n\nTrainingSample <-\n  here(\"output/take-trip-fst\") |>\n  list.files(full.names = TRUE) |>\n  (\\(x) data.table(full_path = x,\n                   n_char = nchar(basename(x)),\n                   name = basename(x)))() |>\n  (\\(dt) dt[order(n_char, name), full_path])() |>\n  head(12L) |>\n  lapply(FUN = fst::read_fst,\n         columns = c(\"take_current_trip\",\n                     \"PULocationID\",\n                     \"DOLocationID\",\n                     \"wav_match_flag\",\n                     \"hvfhs_license_num\",\n                     \"trip_miles\",\n                     \"trip_time\",\n                     \"request_datetime\"),\n         as.data.table = TRUE) |>\n  rbindlist()\n```\n:::\n\n\n\n\n## Defining all features\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAllFeaturesRecipe <-\n  \n  # Starting Recipe\n  recipe(take_current_trip ~ ., \n         data = TrainingSample) |>\n  \n  # Selecting variables over 2 min\n  step_filter(trip_time >= (60 * 2)) |>\n  \n  # Renaming variables to join\n  step_rename(PU_LocationID = PULocationID,\n              DO_LocationID = DOLocationID) |>\n  \n  # Adding Geospatial Data\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = ZoneCodesRef,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = AcsVariablesByZoneId,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = OmsDensityFeatures,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  \n  # Transforming String\n  step_string2factor(all_string_predictors()) |>\n  \n  # Daily cycle\n  step_harmonic(request_datetime, \n                frequency = 1,\n                cycle_size = 3600*24, \n                keep_original_cols = TRUE) |>\n  step_rename(request_datetime_sin_daily = request_datetime_sin_1,\n              request_datetime_cos_daily = request_datetime_cos_1) |>\n  \n  # Weekly cycle\n  step_harmonic(request_datetime, \n                frequency = 1, \n                cycle_size = 3600*24*7, \n                keep_original_cols = TRUE) %>%\n  step_rename(request_datetime_sin_weekly = request_datetime_sin_1,\n              request_datetime_cos_weekly = request_datetime_cos_1) |>\n  \n  # Extracting additional information\n  step_date(request_datetime,\n            features = c(\"year\",\n                         \"week\",\n                         \"decimal\",\n                         \"semester\", \n                         \"quarter\",\n                         \"doy\",\n                         \"dow\",\n                         \"mday\",\n                         \"month\")) |>\n  \n  step_holiday(request_datetime,\n               holidays = c('USChristmasDay',\n                            'USColumbusDay',\n                            'USCPulaskisBirthday',\n                            'USDecorationMemorialDay',\n                            'USElectionDay',\n                            'USGoodFriday',\n                            'USInaugurationDay',\n                            'USIndependenceDay',\n                            'USJuneteenthNationalIndependenceDay',\n                            'USLaborDay',\n                            'USLincolnsBirthday',\n                            'USMemorialDay',\n                            'USMLKingsBirthday',\n                            'USNewYearsDay',\n                            'USPresidentsDay',\n                            'USThanksgivingDay',\n                            'USVeteransDay',\n                            'USWashingtonsBirthday')) |>\n  \n  step_mutate(.pkgs = c(\"data.table\", \"lubridate\", \"timeDate\"),\n              \n              company = fcase(hvfhs_license_num == \"HV0002\", \"Juno\",\n                              hvfhs_license_num == \"HV0003\", \"Uber\",\n                              hvfhs_license_num == \"HV0004\", \"Via\",\n                              hvfhs_license_num == \"HV0005\", \"Lyft\") |> as.factor(),\n              \n              request_datetime_am = am(request_datetime) |> as.integer(),\n              request_datetime_pm = pm(request_datetime) |> as.integer(),\n              \n              `Days to USChristmasDay` = difftime(USChristmasDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USColumbusDay` = difftime(USColumbusDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USCPulaskisBirthday` = difftime(USCPulaskisBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USDecorationMemorialDay` = difftime(USDecorationMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USElectionDay` = difftime(USElectionDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USGoodFriday` = difftime(USGoodFriday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USInaugurationDay` = difftime(USInaugurationDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USIndependenceDay` = difftime(USIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USJuneteenthNationalIndependenceDay` = difftime(USJuneteenthNationalIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLaborDay` = difftime(USLaborDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLincolnsBirthday` = difftime(USLincolnsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMemorialDay` = difftime(USMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMLKingsBirthday` = difftime(USMLKingsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USNewYearsDay` = difftime(USNewYearsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USPresidentsDay` = difftime(USPresidentsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USThanksgivingDay` = difftime(USThanksgivingDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USVeteransDay` = difftime(USVeteransDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USWashingtonsBirthday` = difftime(USWashingtonsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer()) |>\n  \n  \n  # Removing variables\n  step_rm(ends_with(c(\"LocationID\",\"request_datetime\", \"hvfhs_license_num\"))) |>\n  step_nzv(all_predictors())\n```\n:::\n\n\n\n\n## Validating the results\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTransformedData <- \n  AllFeaturesRecipe |>\n  step_dummy(all_nominal_predictors()) |>\n  step_scale(all_numeric_predictors()) |>\n  prep() |>\n  juice()\n\nTransformedCorrelations <- correlate(TransformedData)\n\nsetDT(TransformedData)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Explorting correlations withing predictors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nXinterceptValue <- 0.3\n\nTransformedCorrelations |>\n  subset(term != \"take_current_trip\",\n         select = -take_current_trip) |>\n  shave() |>\n  stretch(na.rm = TRUE) |>\n  transform(abs_r = abs(r)) |>\n  ggplot(aes(abs_r)) +\n  stat_ecdf(linewidth = 0.5) +\n  geom_vline(xintercept = XinterceptValue,\n             linetype = 2,\n             color = params$ColorHighlight,\n             linewidth = 1)+\n  scale_x_continuous(breaks = breaks_width(0.1),\n                     labels = label_percent(accuracy = 1)) +\n    scale_y_continuous(breaks = breaks_width(0.1),\n                       labels = label_percent(accuracy = 1)) +\n    labs(title = glue(\"<b>Empirical cumulative distribution of \",\n                      \"<span style ='color: {params$ColorHighlight}'> predictors' </span>\",\n                      \"absolute correlations</b>\"),\n         subtitle = glue(\"<span style ='color: {params$ColorHighlight}'> 74% of predictors </span>\",\n                         \"present less than {percent(XinterceptValue, accuracy = 1)} \",\n                         \"of correlation\"),\n       x = \"Absolute correlation\",\n       y = \"Empirical cumulative distribution function\")+\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        plot.title = element_markdown(lineheight = 1),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_markdown(margin = margin(b = 20)))\n```\n\n::: {.cell-output-display}\n![](09-data-preparation_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exploring correlations vs target\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTransformedCorrelations |> \n  focus(take_current_trip) |>\n  dplyr::mutate(abs_r = abs(take_current_trip),\n                direction = take_current_trip > 0,\n                term = reorder(term, abs_r, sum)) |>\n  dplyr::slice_max(order_by = abs_r,\n                   n = 15) |>\n  ggplot(aes(abs_r, term)) +\n  geom_blank(aes(x = abs_r *1.1)) +\n  geom_col(aes(fill = direction),\n           color = \"black\",\n           linewidth = 0.3,\n           alpha = 0.8) +\n  scale_fill_manual(values = c(\"TRUE\" = params$ColorGray,\n                               \"FALSE\" = params$ColorHighlight)) +\n  scale_x_continuous(breaks = breaks_width(0.02),\n                     expand = expansion(mult = c(0, 0.01))) +\n  labs(title = \"<b>Top of predictors absolute correlation with taking a trip</b>\",\n       subtitle = \"All predictor present a correlation lower than 0.15, a linear model <b>won't be able to predict the target variable</b>\",\n       y = \"\",\n       x = \"Absolute Correlation\",\n       fill = \"Positive Correlation\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](09-data-preparation_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exploring differencence in median\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTransformedData[, raw_id := .I]\n\nTransformedDataLong <-\n  melt(TransformedData,\n       id.vars = c(\"raw_id\", \"take_current_trip\"),\n       variable.factor = FALSE) \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTopMedianDiffVariables <-\n  TransformedDataLong[, .(median_value = median(value, na.rm = TRUE)),\n                      by = c(\"take_current_trip\", \"variable\")\n  ][, dcast(.SD, variable ~ take_current_trip, value.var = \"median_value\")\n  ][, take_current_trip_diff := `1` - `0`\n  ][order(-abs(take_current_trip_diff))\n  ][1:15, variable]\n\nTransformedDataLong[TopMedianDiffVariables,\n                    on = \"variable\"] |>\n  ggplot(aes(value, variable)) +\n  geom_boxplot(aes(fill = factor(take_current_trip == 1, levels = c(\"TRUE\",\"FALSE\")))) +\n    scale_fill_manual(values = c(\"FALSE\" = params$ColorGray,\n                                 \"TRUE\" = params$ColorHighlight)) +\n  labs(y = \"\",\n       fill = \"Take current trip\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](09-data-preparation_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n# Modeling\n\n\n",
    "supporting": [
      "09-data-preparation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}