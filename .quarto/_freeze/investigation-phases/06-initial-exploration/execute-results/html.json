{
  "hash": "b6901fc05b74b5fcafb3c2cb44cffab5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Initial Exploration\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\nAfter completing the **business understanding** phase, we are ready to perform the **data understanding** phase by performing an EDA with the following steps:\n\n1.  Exploring the individual distribution of variables.\n2.  Exploring correlations between predictors and the target variable.\n3.  Exploring correlations between predictors.\n\nThis will help to:\n\n-   Ensure data quality.\n-   Identify key predictors.\n-   Guide model choice and feature engineering.\n\n## Setting up the environment\n\n### Define colors to use\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nColorHighlight <- \"lightslateblue\"\nColorGray <- \"gray80\"\n```\n:::\n\n\n\n\n### Loading packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## To manage relative paths\nlibrary(here)\n\n## To import and export data frames as binary files\nlibrary(fst)\nlibrary(fstcore)\n\n## To transform data that fits in RAM\nlibrary(data.table)\nlibrary(lubridate)\n\n## To create plots\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(patchwork)\n\n## Defining the print params to use in the report\noptions(datatable.print.nrows = 15, digits = 4)\n\n## Custom functions\ndevtools::load_all()\n```\n:::\n\n\n\n\n### Importing training sample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrainingSample <-\n  here(\"output/take-trip-fst\") |>\n  list.files(full.names = TRUE) |>\n  (\\(x) data.table(full_path = x,\n                   n_char = nchar(basename(x)),\n                   name = basename(x)))() |>\n  (\\(dt) dt[order(n_char, name), full_path])() |>\n  head(12L) |>\n  lapply(FUN = read_fst, as.data.table = TRUE) |>\n  rbindlist()\n```\n:::\n\n\n\n\n### Importing geospatial information\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nZoneCodesRef <-\n  fread(here(\"raw-data/taxi_zone_lookup.csv\"),\n        select = c(\"LocationID\" = \"character\",\n                   \"Borough\" = \"character\",\n                   \"service_zone\" = \"character\"))\n```\n:::\n\n\n\n\n\n\n### Adding features for exploration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrainingSample[,`:=`(company = fcase(hvfhs_license_num == \"HV0002\", \"Juno\",\n                                     hvfhs_license_num == \"HV0003\", \"Uber\",\n                                     hvfhs_license_num == \"HV0004\", \"Via\",\n                                     hvfhs_license_num == \"HV0005\", \"Lyft\"),\n                     \n                     take_current_trip = factor(fifelse(take_current_trip == 1, \"Y\", \"N\"), levels = c(\"Y\", \"N\")),\n                     \n                     weekday = wday(request_datetime, label = TRUE, abbr = FALSE, week_start = 1),\n                     month = month(request_datetime, label = TRUE, abbr = FALSE),\n                     hour = hour(request_datetime),\n                     \n                     trip_time_min = trip_time / 60,\n                     \n                     trip_value = tips + driver_pay,\n                     \n                     PULocationID = as.character(PULocationID),\n                     DOLocationID = as.character(DOLocationID))]\n\n# To explore the distribution provided by the `PULocationID` (Pick Up Zone ID) \n# and `DOLocationID` (Drop Off Zone ID), we need to add extra information.\n# If we check the taxi zone look up table, we can find the `Borough` and\n# `service_zone` of each table.\n\nTrainingSample[ZoneCodesRef,\n               on = c(\"PULocationID\" = \"LocationID\"),\n               `:=`(PULocationID = as.character(PULocationID),\n                    PUBorough = Borough,\n                    PUServiceZone = service_zone)]\n\nTrainingSample[ZoneCodesRef,\n               on = c(\"DOLocationID\" = \"LocationID\"),\n               `:=`(DOLocationID = as.character(DOLocationID),\n                    DOBorough = Borough,\n                    DOServiceZone = service_zone)]\n```\n:::\n\n\n\n\n\n## Exploring individual distributions\n\n\n### Categorical variables\n\n-   Based on `take_current_trip` only 24% of the trips need to be rejected.\n\n-   In `company`, Uber accounts for 72% of trips. In consequence, the results of this project will be **more related to Uber** than any other company.\n\n-   `dispatching_base_num`, `originating_base_num`, and `access_a_ride_flag` all seem to be highly correlated with the company and are **unlikely to be useful for prediction**.\n\n-   Based on `shared_request_flag` and `shared_match_flag` 99% of trips don't request to share the trip and don't end sharing the the trip.\n\n-   Based on `wav_request_flag` and `wav_match_flag` 94% of trips don't request and don't take place in wheelchair-accessible vehicles.\n\n::: panel-tabset\n\n#### Target\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTrainingSample[, .N,\n               by = \"take_current_trip\"\n][,`:=`(prop = N / sum(N),\n        take_current_trip = reorder(take_current_trip, N))] |>\n  ggplot(aes(N, take_current_trip)) +\n  geom_col(fill = ColorGray,\n           color = \"black\",\n           width = 0.5) +\n  geom_text(aes(label = percent(prop, accuracy = 1)),\n            nudge_x = 10000) +\n  scale_x_continuous(labels = comma_format()) +\n  labs(title = \"Only 24% of the trips need to be rejected\",\n       x = \"\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_text(face = \"bold\", size = 15))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Company\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTrainingSample[, .N,\n               by = \"company\"\n][, prop := N / sum(N)] |>\n  ggplot(aes(N, company)) +\n  geom_col(fill = ColorGray,\n           color = \"black\",\n           width = 0.5) +\n  geom_text(aes(label = percent(prop)),\n            nudge_x = 6500) +\n  scale_x_continuous(labels = comma_format()) +\n  labs(title = \"Most of the trips come from Uber\",\n       x = \"\",\n       y = \"Company Name\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        plot.title = element_text(face = \"bold\", size = 15))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Correlated with company\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nPlot_dispatching_base_num <-\n  plot_heap_map(TrainingSample,\n                cat_vars = c(\"company\", \"dispatching_base_num\"),\n                color_high = ColorHighlight,\n                color_low = ColorGray)\n\n\nPlot_originating_base_num <-\n  plot_heap_map(TrainingSample,\n                cat_vars = c(\"company\", \"originating_base_num\"),\n                color_high = ColorHighlight,\n                color_low = ColorGray)\n\nPlot_access_a_ride_flag <-\n  plot_heap_map(TrainingSample,\n                cat_vars = c(\"company\", \"access_a_ride_flag\"),\n                color_high = ColorHighlight,\n                color_low = ColorGray,\n                sep = \"\\n\")\n\nPlot_access_a_ride_flag \n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n\n(Plot_dispatching_base_num + Plot_originating_base_num)\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Shared trips\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_heap_map(TrainingSample,\n              cat_vars = c(\"shared_request_flag\", \"shared_match_flag\"),\n              color_high = ColorHighlight,\n              color_low = ColorGray,\n              sep = \"\\n\") +\n  labs(title = \"\",\n       x = \"shared_request_flag\",\n       y = \"shared_match_flag\")\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Wheelchair-accessible vehicles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n\nplot_heap_map(TrainingSample,\n              cat_vars = c(\"wav_request_flag\", \"wav_match_flag\"),\n              color_high = ColorHighlight,\n              color_low = ColorGray,\n              sep = \"\\n\") +\n  labs(title = \"\",\n       x = \"wav_request_flag\",\n       y = \"wav_match_flag\")\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n\n### Datetime variables\n\nBased on the reports, we can confirm that we have a good number of example from each `month`, `weekday` and `hour`. The only exception is December from which only have 3,160 of the total sample of  242,186.\n\n::: panel-tabset\n#### Month\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_bar(TrainingSample,\n         \"month\",\n         color_highlight = ColorHighlight,\n         color_gray = ColorGray)\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Weekday\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_bar(TrainingSample,\n         \"weekday\",\n         color_highlight = ColorHighlight,\n         color_gray = ColorGray,\n         n_top = 1L)\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Hour\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_bar(TrainingSample,\n         \"hour\",\n         color_highlight = ColorHighlight,\n         color_gray = ColorGray)\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### Geospatial data\n\nBased on the next results, we can conclude that:\n\n1.  Based on the `borough`, must of the trips start and end in Manhattan.\n\n2.  `service_zone` is correlated with the `borough` and don't provide much difference information.\n\n3.  We have examples for all `LocationID`, but the number of examples for each zone change a lot from zone to zone, as expected.\n\n::: panel-tabset\n\n#### Borough\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nPlotPUBorough <-\n  plot_bar(TrainingSample,\n           var_name = \"PUBorough\",\n           n_top = 1L) +\n  labs(title = \"PUBorough\")\n\nPlotDOBorough <-\n  plot_bar(TrainingSample,\n           var_name = \"DOBorough\",\n           n_top = 1L) +\n  labs(title = \"DOBorough\")\n\nPlotPUBorough / PlotDOBorough\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Service Zone\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nPlotPUServiceZone <-\n  plot_heap_map(TrainingSample,\n                cat_vars = c(\"PUBorough\", \"PUServiceZone\"),\n                sep = \"\\n\") +\n  labs(title = \"PUBorough vs PUServiceZone\")\n\nPlotDOServiceZone <-\n  plot_heap_map(TrainingSample,\n                cat_vars = c(\"DOBorough\", \"DOServiceZone\"),\n                sep = \"\\n\") +\n  labs(title = \"DOBorough vs DOServiceZone\")\n\nPlotPUServiceZone / PlotDOServiceZone\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n#### PU Locations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nLocationIdTextSize <- 7\n\nsetkeyv(TrainingSample, \"PUBorough\")\n\nPlotPuLocations1 <-\n  plot_bar(TrainingSample[\"Manhattan\"],\n           var_name = \"PULocationID\") +\n  labs(subtitle = \"Manhattan\") +\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotPuLocations2 <-\n  plot_bar(TrainingSample[\"Brooklyn\"],\n           var_name = \"PULocationID\") +\n  labs(subtitle = \"Brooklyn\")+\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotPuLocations3 <-\n  plot_bar(TrainingSample[\"Queens\"],\n           var_name = \"PULocationID\") +\n  labs(subtitle = \"Queens\")+\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotPuLocations1 / PlotPuLocations2 / PlotPuLocations3\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n#### DO Locations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nsetkeyv(TrainingSample, \"DOBorough\")\n\nPlotDoLocations1 <-\n  plot_bar(TrainingSample[\"Manhattan\"],\n           var_name = \"DOLocationID\") +\n  labs(subtitle = \"Manhattan\") +\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotDoLocations2 <-\n  plot_bar(TrainingSample[\"Brooklyn\"],\n           var_name = \"DOLocationID\") +\n  labs(subtitle = \"Brooklyn\")+\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotDoLocations3 <-\n  plot_bar(TrainingSample[\"Queens\"],\n           var_name = \"DOLocationID\") +\n  labs(subtitle = \"Queens\")+\n  theme(axis.text.y = element_text(size = LocationIdTextSize))\n\nPlotDoLocations1 / PlotDoLocations2 / PlotDoLocations3\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Numerical variables\n\nBased on the below graphs, we can say that:\n\n1. `trip_miles` is **right skewed** with very few trips close to 100 miles, so logarithmic transformation of based 2 makes easier to see that 75% of trips take from 1 to 8 miles and based on the ECDF plot we can also see that really few trips take more than 24 miles, but 10% takes less than 1 mile.\n\n2. `trip_time_min` is **right skewed** with very few trips close to 400 min, so logarithmic transformation of based 2 makes easier to see that 89% of trips take from 2 to 35 min and based on the ECDF plot we can also see that really few trips take more than 70 min or less than 2 min.\n\n1. `tips` is **strongly right-skewed**, as approximately **79% of trips recorded no tip**. Among the remaining 21% of trips, about 10% have tips in the range `(0, 4]` dollars and approximately 9% fall within `(4, 10]` dollars. It is uncommon to observe trips with tips exceeding 10 dollars, and trips with tips greater than 20 dollars are exceedingly rare.\n\n3. `driver_pay` is **right skewed** __pending__ to explain.\n\n4. `performance_per_hour` present some over inflated values of around 30K dollars per hour, which make no sense based on what we saw in when defining the based line to improve of 50 dollars per hour. After applying a logarithmic scale of base 2, we can see the real distribution, we can find that some of the trips have a negative performance, but thanks to the ECDF Plot we know that only 5% of the points present less than 40 dollars per hour, 7% of the trips present values greater than 100 dollars per hour and only 1% of the example present a performance grater than 160 dollars per hour.\n\n5. `performance_per_hour` after removing trips with less 2 min, we can see a huge difference. Now the max performance it's around 900 dollars per hour but the general distribution was not affected.\n\n::: panel-tabset\n\n#### Trip miles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample,\n                      trip_miles,\n                      title = \"trip_miles\",\n                      hist_binwidth = 5,\n                      hist_n_break = 12,\n                      log_binwidth = 0.5,\n                      curve_important_points = c(1, 8, 24),\n                      curve_limits = c(0, 25),\n                      curve_nudge_y = 0.08,\n                      curve_breaks_x = breaks_width(3))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Trip time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample,\n                      trip_time_min,\n                      title = \"trip_time_min\",\n                      hist_binwidth = 5,\n                      hist_n_break = 12,\n                      log_binwidth = 0.5,\n                      curve_important_points = c(2, 35, 70),\n                      curve_nudge_y = 0.1,\n                      curve_breaks_x = scales::breaks_width(10),\n                      curve_limits = c(0, 90))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n#### tips\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample,\n                      tips,\n                      title = \"tips\",\n                      hist_n_break = 12,\n                      hist_binwidth = 2,\n                      log_binwidth = 0.2,\n                      curve_important_points = c(0, 4, 10, 20),\n                      curve_nudge_y = 0.02,\n                      curve_breaks_x = scales::breaks_width(2),\n                      curve_limits = c(0, 20))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n#### driver_pay\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample,\n                      driver_pay,\n                      title = \"driver_pay\",\n                      hist_n_break = 12,\n                      hist_binwidth = 10,\n                      log_binwidth = 0.2,\n                      curve_important_points = c(7, 40, 80),\n                      curve_nudge_y = 0.1,\n                      curve_breaks_x = scales::breaks_width(10),\n                      curve_limits = c(-50, 100))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### performance_per_hour\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample,\n                      performance_per_hour,\n                      title = \"performance_per_hour\",\n                      hist_n_break = 12,\n                      hist_binwidth = 10,\n                      log_binwidth = 0.2,\n                      log_breaks = c(-2^(0:10), 0, 2^(0:20)),\n                      curve_important_points = c(0,40, 70, 100, 160),\n                      curve_nudge_y = 0.1,\n                      curve_breaks_x = scales::breaks_width(10),\n                      curve_limits = c(-30, 200))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n#### performance_per_hour[trip_time_min >= 2]\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample[trip_time_min >= 2],\n                      performance_per_hour,\n                      title = \"performance_per_hour\",\n                      hist_n_break = 12,\n                      hist_binwidth = 10,\n                      log_binwidth = 0.2,\n                      log_breaks = c(-2^(0:10), 0, 2^(0:20)),\n                      curve_important_points = c(0,40, 70, 100, 160),\n                      curve_nudge_y = 0.1,\n                      curve_breaks_x = scales::breaks_width(10),\n                      curve_limits = c(-30, 200))\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n## Predictors vs `take_current_trip`\n\nAfter exploring the distribution of the individual variables we know that we are going to train our model based on trips with **more than 2 minutes of trip**, so we are going to **exclude those cases** for this analysis.\n\nFor **categorical variables** we only need to focus on variables with *at least __2 levels__ that present more than __1% of the trips__*. \n\n1. `dispatching_base_num`, `originating_base_num`, and `access_a_ride_flag` were not included as represent the same information that the `company`.\n2. `PULocationID` and `DOLocationID` present a **strong** variation.\n3. `wav_match_flag`present a **moderate** variation.\n4. `company` present a **moderate** variation.\n5. `weekday` present **low** variation.\n6. `month` present a **moderate** variation.\n7. `hour` present a **strong** variation.\n8. `PUBorough` present a **strong** variation.\n9. `PUServiceZone` present a **strong** variation.\n10. `DOBorough` present a **strong** variation.\n11. `DOServiceZone` present a **strong** variation.\n\nFor **numerical variables**:\n\n1. `trip_miles` alone is not highly effective in predicting whether a trip will be taken as but classes present *overlapping distributions* and *similar cumulative distributions*, which make it a **low** predictor.\n\n2. `trip_time_min` alone is not highly effective in predicting whether a trip will be taken as both classes present *overlapping distributions* and *similar cumulative distributions*, which make it a **low** predictor.\n\n::: panel-tabset\n\n### Categorical\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTrainingSampleValidCat <-\n  TrainingSample[trip_time_min >= 2,\n                 c(.SD, list(\"trip_id\" = trip_id)) |> lapply(as.character),\n                 .SDcols = \\(x) is.character(x) | is.factor(x) | is.integer(x)\n  ][, melt(.SD,\n           id.vars = c(\"trip_id\", \"take_current_trip\")),\n    .SDcols = !c(\"hvfhs_license_num\",\n                 \"dispatching_base_num\",\n                 \"originating_base_num\",\n                 \"access_a_ride_flag\")\n  ][, value_count := .N,\n    by = c(\"variable\", \"value\")\n  ][, value_prop := value_count / .N,\n    by = \"variable\"\n  ][value_prop >= 0.01\n  ][, n_unique_values := uniqueN(value),\n    by = \"variable\"\n  ][n_unique_values > 1L] \n\nggplot(TrainingSampleValidCat,\n       aes(value, fill = factor(take_current_trip, levels = c(\"Y\", \"N\")))) +\n  geom_bar(width = 0.7,\n           position = \"fill\") +\n  scale_fill_manual(values = c(\"N\" = ColorHighlight ,\"Y\" = ColorGray))+\n  scale_y_continuous(labels = percent_format(accuracy = 1)) + \n  facet_wrap(vars(variable),\n             scale = \"free\",\n             ncol = 3) +\n  coord_flip()+\n  labs(y = \"Prop of trips\",\n       fill = \"take_current_trip\") +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-25-1.png){width=768}\n:::\n:::\n\n\n\n\n### Trip miles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample[trip_time_min >= 2],\n                      trip_miles,\n                      title = \"trip_miles\",\n                      take_current_trip,\n                      manual_fill_values = c(\"N\" = ColorHighlight, \"Y\" = ColorGray),\n                      hist_binwidth = 5,\n                      hist_n_break = 12,\n                      log_binwidth = 0.5,\n                      curve_limits = c(0, 25),\n                      curve_breaks_x = breaks_width(3))\n#> Warning: Removed 489 rows containing non-finite outside the scale range\n#> (`stat_ecdf()`).\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n### Trip time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_num_distribution(TrainingSample[trip_time_min >= 2],\n                      trip_time_min,\n                      take_current_trip,\n                      manual_fill_values = c(\"N\" = ColorHighlight, \"Y\" = ColorGray),\n                      title = \"trip_time_min\",\n                      hist_binwidth = 5,\n                      hist_n_break = 12,\n                      log_binwidth = 0.5,\n                      curve_breaks_x = scales::breaks_width(10),\n                      curve_limits = c(0, 90))\n#> Warning: Removed 460 rows containing non-finite outside the scale range\n#> (`stat_ecdf()`).\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n## Exploring correlations between predictors\n\nThere is not a surprise that `trip_time_min` and `trip_miles` present a __79%__ of correlation.\n\nBut on the other hand, by checking the Cramer's V correlation between categorical predictors we can see that there is low correlation between predictors, with the exception of features linked to locations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nTrainingSample[trip_time_min >= 2,\n               .SD,\n               .SDcols = levels(TrainingSampleValidCat$variable)] |>\n  corrcat::cramerV_df(unique = FALSE)|>\n  ggplot(aes(V1, V2, fill = `Cramer.V`))+\n  geom_tile()+\n  scale_fill_gradient(low = \"white\",\n                      high = ColorHighlight,\n                      space = \"Lab\",\n                      na.value = \"white\") +\n  geom_text(aes(label = percent(`Cramer.V`, accuracy = 1)),\n            size = 2.5) + \n  labs(title = \"Cramer's V correlation\")+\n  theme_minimal()+\n  theme(legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90),\n        axis.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](06-initial-exploration_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "06-initial-exploration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}