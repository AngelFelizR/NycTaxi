{"title":"Data Preparation","markdown":{"yaml":{"title":"Data Preparation","editor_options":{"chunk_output_type":"console"},"execute":{"message":false,"warning":false}},"headingText":"Setting up the environment","containsRefs":false,"markdown":"\n\n    \n\n\n```{r}\n## Tools for modeling\nlibrary(tidymodels)\n\n## Tools to explore correlations\nlibrary(corrr)\nlibrary(ggtext)\nlibrary(glue)\nlibrary(scales)\n\n## To manage relative paths\nlibrary(here)\n\n## To transform data that fits in RAM\nlibrary(data.table)\nlibrary(lubridate)\nlibrary(timeDate)\n\n## Custom functions\ndevtools::load_all()\n\n#params <- yaml::read_yaml(here(\"params.yml\"))\n```\n\n## Importing data\n\n```{r}\nAcsVariablesByZoneId <- fst::read_fst(\n  here(\"output/AcsVariablesByZoneId.fst\"),\n  as.data.table = TRUE\n)\n\nOmsDensityFeatures <- fst::read_fst(\n  here(\"output/OmsDensityFeatures.fst\"),\n  as.data.table = TRUE\n)\n\nZoneCodesRef <-\n  fread(here(\"raw-data/taxi_zone_lookup.csv\"),\n        select = c(\"LocationID\" = \"integer\",\n                   \"Borough\" = \"character\",\n                   \"service_zone\" = \"character\"))\n\nTrainingSample <-\n  here(\"output/take-trip-fst\") |>\n  list.files(full.names = TRUE) |>\n  (\\(x) data.table(full_path = x,\n                   n_char = nchar(basename(x)),\n                   name = basename(x)))() |>\n  (\\(dt) dt[order(n_char, name), full_path])() |>\n  head(12L) |>\n  lapply(FUN = fst::read_fst,\n         columns = c(\"take_current_trip\",\n                     \"PULocationID\",\n                     \"DOLocationID\",\n                     \"wav_match_flag\",\n                     \"hvfhs_license_num\",\n                     \"trip_miles\",\n                     \"trip_time\",\n                     \"request_datetime\"),\n         as.data.table = TRUE) |>\n  rbindlist()\n```\n\n## Defining all features\n\n```{r}\nAllFeaturesRecipe <-\n  \n  # Starting Recipe\n  recipe(take_current_trip ~ ., \n         data = TrainingSample) |>\n  \n  # Selecting variables over 2 min\n  step_filter(trip_time >= (60 * 2)) |>\n  \n  # Renaming variables to join\n  step_rename(PU_LocationID = PULocationID,\n              DO_LocationID = DOLocationID) |>\n  \n  # Adding Geospatial Data\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = ZoneCodesRef,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = AcsVariablesByZoneId,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = OmsDensityFeatures,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  \n  # Transforming String\n  step_string2factor(all_string_predictors()) |>\n  \n  # Daily cycle\n  step_harmonic(request_datetime, \n                frequency = 1,\n                cycle_size = 3600*24, \n                keep_original_cols = TRUE) |>\n  step_rename(request_datetime_sin_daily = request_datetime_sin_1,\n              request_datetime_cos_daily = request_datetime_cos_1) |>\n  \n  # Weekly cycle\n  step_harmonic(request_datetime, \n                frequency = 1, \n                cycle_size = 3600*24*7, \n                keep_original_cols = TRUE) %>%\n  step_rename(request_datetime_sin_weekly = request_datetime_sin_1,\n              request_datetime_cos_weekly = request_datetime_cos_1) |>\n  \n  # Extracting additional information\n  step_date(request_datetime,\n            features = c(\"year\",\n                         \"week\",\n                         \"decimal\",\n                         \"semester\", \n                         \"quarter\",\n                         \"doy\",\n                         \"dow\",\n                         \"mday\",\n                         \"month\")) |>\n  \n  step_holiday(request_datetime,\n               holidays = c('USChristmasDay',\n                            'USColumbusDay',\n                            'USCPulaskisBirthday',\n                            'USDecorationMemorialDay',\n                            'USElectionDay',\n                            'USGoodFriday',\n                            'USInaugurationDay',\n                            'USIndependenceDay',\n                            'USJuneteenthNationalIndependenceDay',\n                            'USLaborDay',\n                            'USLincolnsBirthday',\n                            'USMemorialDay',\n                            'USMLKingsBirthday',\n                            'USNewYearsDay',\n                            'USPresidentsDay',\n                            'USThanksgivingDay',\n                            'USVeteransDay',\n                            'USWashingtonsBirthday')) |>\n  \n  step_mutate(.pkgs = c(\"data.table\", \"lubridate\", \"timeDate\"),\n              \n              company = fcase(hvfhs_license_num == \"HV0002\", \"Juno\",\n                              hvfhs_license_num == \"HV0003\", \"Uber\",\n                              hvfhs_license_num == \"HV0004\", \"Via\",\n                              hvfhs_license_num == \"HV0005\", \"Lyft\") |> as.factor(),\n              \n              request_datetime_am = am(request_datetime) |> as.integer(),\n              request_datetime_pm = pm(request_datetime) |> as.integer(),\n              \n              `Days to USChristmasDay` = difftime(USChristmasDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USColumbusDay` = difftime(USColumbusDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USCPulaskisBirthday` = difftime(USCPulaskisBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USDecorationMemorialDay` = difftime(USDecorationMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USElectionDay` = difftime(USElectionDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USGoodFriday` = difftime(USGoodFriday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USInaugurationDay` = difftime(USInaugurationDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USIndependenceDay` = difftime(USIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USJuneteenthNationalIndependenceDay` = difftime(USJuneteenthNationalIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLaborDay` = difftime(USLaborDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLincolnsBirthday` = difftime(USLincolnsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMemorialDay` = difftime(USMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMLKingsBirthday` = difftime(USMLKingsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USNewYearsDay` = difftime(USNewYearsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USPresidentsDay` = difftime(USPresidentsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USThanksgivingDay` = difftime(USThanksgivingDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USVeteransDay` = difftime(USVeteransDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USWashingtonsBirthday` = difftime(USWashingtonsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer()) |>\n  \n  \n  # Removing variables\n  step_rm(ends_with(c(\"LocationID\",\"request_datetime\", \"hvfhs_license_num\"))) |>\n  step_nzv(all_predictors())\n\n```\n\n## Validating the results\n\n\n```{r}\n#| echo: false\n#| output: false\n\nTransformedDataFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedData.qs\")\n\nTransformedCorrelationsFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedCorrelations.qs\")\n\nif(file.exists(TransformedDataFilePath)) {\n  TransformedData <- qs2::qs_read(TransformedDataFilePath)\n}\nif(file.exists(TransformedCorrelationsFilePath)) {\n  TransformedCorrelations <- qs2::qs_read(TransformedCorrelationsFilePath)\n}\n```\n\n\n```{r}\n#| eval: false\n\nTransformedData <- \n  AllFeaturesRecipe |>\n  step_dummy(all_nominal_predictors()) |>\n  step_scale(all_numeric_predictors()) |>\n  prep() |>\n  juice()\n\nTransformedCorrelations <- correlate(TransformedData)\n\nsetDT(TransformedData)\n```\n\n```{r}\n#| eval: false\n#| echo: false\n#| output: false\n\nqs2::qs_save(TransformedData, TransformedDataFilePath)\nqs2::qs_save(TransformedCorrelations, TransformedCorrelationsFilePath)\n```\n\n## Explorting correlations withing predictors\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nXinterceptValue <- 0.3\n\nTransformedCorrelations |>\n  subset(term != \"take_current_trip\",\n         select = -take_current_trip) |>\n  shave() |>\n  stretch(na.rm = TRUE) |>\n  transform(abs_r = abs(r)) |>\n  ggplot(aes(abs_r)) +\n  stat_ecdf(linewidth = 0.5) +\n  geom_vline(xintercept = XinterceptValue,\n             linetype = 2,\n             color = params$ColorHighlight,\n             linewidth = 1)+\n  scale_x_continuous(breaks = breaks_width(0.1),\n                     labels = label_percent(accuracy = 1)) +\n    scale_y_continuous(breaks = breaks_width(0.1),\n                       labels = label_percent(accuracy = 1)) +\n    labs(title = glue(\"<b>Empirical cumulative distribution of \",\n                      \"<span style ='color: {params$ColorHighlight}'> predictors' </span>\",\n                      \"absolute correlations</b>\"),\n         subtitle = glue(\"<span style ='color: {params$ColorHighlight}'> 74% of predictors </span>\",\n                         \"present less than {percent(XinterceptValue, accuracy = 1)} \",\n                         \"of correlation\"),\n       x = \"Absolute correlation\",\n       y = \"Empirical cumulative distribution function\")+\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        plot.title = element_markdown(lineheight = 1),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_markdown(margin = margin(b = 20)))\n```\n\n## Exploring correlations vs target\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nTransformedCorrelations |> \n  focus(take_current_trip) |>\n  dplyr::mutate(abs_r = abs(take_current_trip),\n                direction = take_current_trip > 0,\n                term = reorder(term, abs_r, sum)) |>\n  dplyr::slice_max(order_by = abs_r,\n                   n = 15) |>\n  ggplot(aes(abs_r, term)) +\n  geom_blank(aes(x = abs_r *1.1)) +\n  geom_col(aes(fill = direction),\n           color = \"black\",\n           linewidth = 0.3,\n           alpha = 0.8) +\n  scale_fill_manual(values = c(\"TRUE\" = params$ColorGray,\n                               \"FALSE\" = params$ColorHighlight)) +\n  scale_x_continuous(breaks = breaks_width(0.02),\n                     expand = expansion(mult = c(0, 0.01))) +\n  labs(title = \"<b>Top of predictors absolute correlation with taking a trip</b>\",\n       subtitle = \"All predictor present a correlation lower than 0.15, a linear model <b>won't be able to predict the target variable</b>\",\n       y = \"\",\n       x = \"Absolute Correlation\",\n       fill = \"Positive Correlation\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n## Exploring differencence in median\n\n```{r}\n#| echo: false\n#| output: false\n\nTransformedDataLongFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedDataLong.qs\")\n\nif(file.exists(TransformedDataLongFilePath)) {\n  TransformedDataLong <- qs2::qs_read(TransformedDataLongFilePath)\n}\n```\n\n```{r}\nTransformedData[, raw_id := .I]\n\nTransformedDataLong <-\n  melt(TransformedData,\n       id.vars = c(\"raw_id\", \"take_current_trip\"),\n       variable.factor = FALSE) \n```\n\n```{r}\n#| eval: false\n#| echo: false\n#| output: false\n\nqs2::qs_save(TransformedDataLong, TransformedDataLongFilePath)\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nTopMedianDiffVariables <-\n  TransformedDataLong[, .(median_value = median(value, na.rm = TRUE)),\n                      by = c(\"take_current_trip\", \"variable\")\n  ][, dcast(.SD, variable ~ take_current_trip, value.var = \"median_value\")\n  ][, take_current_trip_diff := `1` - `0`\n  ][order(-abs(take_current_trip_diff))\n  ][1:15, variable]\n\nTransformedDataLong[TopMedianDiffVariables,\n                    on = \"variable\"] |>\n  ggplot(aes(value, variable)) +\n  geom_boxplot(aes(fill = factor(take_current_trip == 1, levels = c(\"TRUE\",\"FALSE\")))) +\n    scale_fill_manual(values = c(\"FALSE\" = params$ColorGray,\n                                 \"TRUE\" = params$ColorHighlight)) +\n  labs(y = \"\",\n       fill = \"Take current trip\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n# Modeling\n\n\n","srcMarkdownNoYaml":"\n\n    \n## Setting up the environment\n\n\n```{r}\n## Tools for modeling\nlibrary(tidymodels)\n\n## Tools to explore correlations\nlibrary(corrr)\nlibrary(ggtext)\nlibrary(glue)\nlibrary(scales)\n\n## To manage relative paths\nlibrary(here)\n\n## To transform data that fits in RAM\nlibrary(data.table)\nlibrary(lubridate)\nlibrary(timeDate)\n\n## Custom functions\ndevtools::load_all()\n\n#params <- yaml::read_yaml(here(\"params.yml\"))\n```\n\n## Importing data\n\n```{r}\nAcsVariablesByZoneId <- fst::read_fst(\n  here(\"output/AcsVariablesByZoneId.fst\"),\n  as.data.table = TRUE\n)\n\nOmsDensityFeatures <- fst::read_fst(\n  here(\"output/OmsDensityFeatures.fst\"),\n  as.data.table = TRUE\n)\n\nZoneCodesRef <-\n  fread(here(\"raw-data/taxi_zone_lookup.csv\"),\n        select = c(\"LocationID\" = \"integer\",\n                   \"Borough\" = \"character\",\n                   \"service_zone\" = \"character\"))\n\nTrainingSample <-\n  here(\"output/take-trip-fst\") |>\n  list.files(full.names = TRUE) |>\n  (\\(x) data.table(full_path = x,\n                   n_char = nchar(basename(x)),\n                   name = basename(x)))() |>\n  (\\(dt) dt[order(n_char, name), full_path])() |>\n  head(12L) |>\n  lapply(FUN = fst::read_fst,\n         columns = c(\"take_current_trip\",\n                     \"PULocationID\",\n                     \"DOLocationID\",\n                     \"wav_match_flag\",\n                     \"hvfhs_license_num\",\n                     \"trip_miles\",\n                     \"trip_time\",\n                     \"request_datetime\"),\n         as.data.table = TRUE) |>\n  rbindlist()\n```\n\n## Defining all features\n\n```{r}\nAllFeaturesRecipe <-\n  \n  # Starting Recipe\n  recipe(take_current_trip ~ ., \n         data = TrainingSample) |>\n  \n  # Selecting variables over 2 min\n  step_filter(trip_time >= (60 * 2)) |>\n  \n  # Renaming variables to join\n  step_rename(PU_LocationID = PULocationID,\n              DO_LocationID = DOLocationID) |>\n  \n  # Adding Geospatial Data\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = ZoneCodesRef,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = AcsVariablesByZoneId,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  step_join_geospatial_features(ends_with(\"LocationID\"),\n                                spatial_features = OmsDensityFeatures,\n                                col_prefix = c(\"DO_\", \"PU_\")) |>\n  \n  # Transforming String\n  step_string2factor(all_string_predictors()) |>\n  \n  # Daily cycle\n  step_harmonic(request_datetime, \n                frequency = 1,\n                cycle_size = 3600*24, \n                keep_original_cols = TRUE) |>\n  step_rename(request_datetime_sin_daily = request_datetime_sin_1,\n              request_datetime_cos_daily = request_datetime_cos_1) |>\n  \n  # Weekly cycle\n  step_harmonic(request_datetime, \n                frequency = 1, \n                cycle_size = 3600*24*7, \n                keep_original_cols = TRUE) %>%\n  step_rename(request_datetime_sin_weekly = request_datetime_sin_1,\n              request_datetime_cos_weekly = request_datetime_cos_1) |>\n  \n  # Extracting additional information\n  step_date(request_datetime,\n            features = c(\"year\",\n                         \"week\",\n                         \"decimal\",\n                         \"semester\", \n                         \"quarter\",\n                         \"doy\",\n                         \"dow\",\n                         \"mday\",\n                         \"month\")) |>\n  \n  step_holiday(request_datetime,\n               holidays = c('USChristmasDay',\n                            'USColumbusDay',\n                            'USCPulaskisBirthday',\n                            'USDecorationMemorialDay',\n                            'USElectionDay',\n                            'USGoodFriday',\n                            'USInaugurationDay',\n                            'USIndependenceDay',\n                            'USJuneteenthNationalIndependenceDay',\n                            'USLaborDay',\n                            'USLincolnsBirthday',\n                            'USMemorialDay',\n                            'USMLKingsBirthday',\n                            'USNewYearsDay',\n                            'USPresidentsDay',\n                            'USThanksgivingDay',\n                            'USVeteransDay',\n                            'USWashingtonsBirthday')) |>\n  \n  step_mutate(.pkgs = c(\"data.table\", \"lubridate\", \"timeDate\"),\n              \n              company = fcase(hvfhs_license_num == \"HV0002\", \"Juno\",\n                              hvfhs_license_num == \"HV0003\", \"Uber\",\n                              hvfhs_license_num == \"HV0004\", \"Via\",\n                              hvfhs_license_num == \"HV0005\", \"Lyft\") |> as.factor(),\n              \n              request_datetime_am = am(request_datetime) |> as.integer(),\n              request_datetime_pm = pm(request_datetime) |> as.integer(),\n              \n              `Days to USChristmasDay` = difftime(USChristmasDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USColumbusDay` = difftime(USColumbusDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USCPulaskisBirthday` = difftime(USCPulaskisBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USDecorationMemorialDay` = difftime(USDecorationMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USElectionDay` = difftime(USElectionDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USGoodFriday` = difftime(USGoodFriday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USInaugurationDay` = difftime(USInaugurationDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USIndependenceDay` = difftime(USIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USJuneteenthNationalIndependenceDay` = difftime(USJuneteenthNationalIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLaborDay` = difftime(USLaborDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USLincolnsBirthday` = difftime(USLincolnsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMemorialDay` = difftime(USMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USMLKingsBirthday` = difftime(USMLKingsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USNewYearsDay` = difftime(USNewYearsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USPresidentsDay` = difftime(USPresidentsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USThanksgivingDay` = difftime(USThanksgivingDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USVeteransDay` = difftime(USVeteransDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),\n              `Days to USWashingtonsBirthday` = difftime(USWashingtonsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer()) |>\n  \n  \n  # Removing variables\n  step_rm(ends_with(c(\"LocationID\",\"request_datetime\", \"hvfhs_license_num\"))) |>\n  step_nzv(all_predictors())\n\n```\n\n## Validating the results\n\n\n```{r}\n#| echo: false\n#| output: false\n\nTransformedDataFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedData.qs\")\n\nTransformedCorrelationsFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedCorrelations.qs\")\n\nif(file.exists(TransformedDataFilePath)) {\n  TransformedData <- qs2::qs_read(TransformedDataFilePath)\n}\nif(file.exists(TransformedCorrelationsFilePath)) {\n  TransformedCorrelations <- qs2::qs_read(TransformedCorrelationsFilePath)\n}\n```\n\n\n```{r}\n#| eval: false\n\nTransformedData <- \n  AllFeaturesRecipe |>\n  step_dummy(all_nominal_predictors()) |>\n  step_scale(all_numeric_predictors()) |>\n  prep() |>\n  juice()\n\nTransformedCorrelations <- correlate(TransformedData)\n\nsetDT(TransformedData)\n```\n\n```{r}\n#| eval: false\n#| echo: false\n#| output: false\n\nqs2::qs_save(TransformedData, TransformedDataFilePath)\nqs2::qs_save(TransformedCorrelations, TransformedCorrelationsFilePath)\n```\n\n## Explorting correlations withing predictors\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nXinterceptValue <- 0.3\n\nTransformedCorrelations |>\n  subset(term != \"take_current_trip\",\n         select = -take_current_trip) |>\n  shave() |>\n  stretch(na.rm = TRUE) |>\n  transform(abs_r = abs(r)) |>\n  ggplot(aes(abs_r)) +\n  stat_ecdf(linewidth = 0.5) +\n  geom_vline(xintercept = XinterceptValue,\n             linetype = 2,\n             color = params$ColorHighlight,\n             linewidth = 1)+\n  scale_x_continuous(breaks = breaks_width(0.1),\n                     labels = label_percent(accuracy = 1)) +\n    scale_y_continuous(breaks = breaks_width(0.1),\n                       labels = label_percent(accuracy = 1)) +\n    labs(title = glue(\"<b>Empirical cumulative distribution of \",\n                      \"<span style ='color: {params$ColorHighlight}'> predictors' </span>\",\n                      \"absolute correlations</b>\"),\n         subtitle = glue(\"<span style ='color: {params$ColorHighlight}'> 74% of predictors </span>\",\n                         \"present less than {percent(XinterceptValue, accuracy = 1)} \",\n                         \"of correlation\"),\n       x = \"Absolute correlation\",\n       y = \"Empirical cumulative distribution function\")+\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        plot.title = element_markdown(lineheight = 1),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_markdown(margin = margin(b = 20)))\n```\n\n## Exploring correlations vs target\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nTransformedCorrelations |> \n  focus(take_current_trip) |>\n  dplyr::mutate(abs_r = abs(take_current_trip),\n                direction = take_current_trip > 0,\n                term = reorder(term, abs_r, sum)) |>\n  dplyr::slice_max(order_by = abs_r,\n                   n = 15) |>\n  ggplot(aes(abs_r, term)) +\n  geom_blank(aes(x = abs_r *1.1)) +\n  geom_col(aes(fill = direction),\n           color = \"black\",\n           linewidth = 0.3,\n           alpha = 0.8) +\n  scale_fill_manual(values = c(\"TRUE\" = params$ColorGray,\n                               \"FALSE\" = params$ColorHighlight)) +\n  scale_x_continuous(breaks = breaks_width(0.02),\n                     expand = expansion(mult = c(0, 0.01))) +\n  labs(title = \"<b>Top of predictors absolute correlation with taking a trip</b>\",\n       subtitle = \"All predictor present a correlation lower than 0.15, a linear model <b>won't be able to predict the target variable</b>\",\n       y = \"\",\n       x = \"Absolute Correlation\",\n       fill = \"Positive Correlation\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n## Exploring differencence in median\n\n```{r}\n#| echo: false\n#| output: false\n\nTransformedDataLongFilePath <-\n  here(\"output/cache-data/09-data-preparation/TransformedDataLong.qs\")\n\nif(file.exists(TransformedDataLongFilePath)) {\n  TransformedDataLong <- qs2::qs_read(TransformedDataLongFilePath)\n}\n```\n\n```{r}\nTransformedData[, raw_id := .I]\n\nTransformedDataLong <-\n  melt(TransformedData,\n       id.vars = c(\"raw_id\", \"take_current_trip\"),\n       variable.factor = FALSE) \n```\n\n```{r}\n#| eval: false\n#| echo: false\n#| output: false\n\nqs2::qs_save(TransformedDataLong, TransformedDataLongFilePath)\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nTopMedianDiffVariables <-\n  TransformedDataLong[, .(median_value = median(value, na.rm = TRUE)),\n                      by = c(\"take_current_trip\", \"variable\")\n  ][, dcast(.SD, variable ~ take_current_trip, value.var = \"median_value\")\n  ][, take_current_trip_diff := `1` - `0`\n  ][order(-abs(take_current_trip_diff))\n  ][1:15, variable]\n\nTransformedDataLong[TopMedianDiffVariables,\n                    on = \"variable\"] |>\n  ggplot(aes(value, variable)) +\n  geom_boxplot(aes(fill = factor(take_current_trip == 1, levels = c(\"TRUE\",\"FALSE\")))) +\n    scale_fill_manual(values = c(\"FALSE\" = params$ColorGray,\n                                 \"TRUE\" = params$ColorHighlight)) +\n  labs(y = \"\",\n       fill = \"Take current trip\") +\n  theme_minimal(base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"top\",\n        plot.title = element_markdown(lineheight = 1),\n        plot.subtitle = element_markdown(margin = margin(b = 20)),\n        plot.title.position = \"plot\",\n        axis.text.y = element_text(size = 10))\n```\n\n# Modeling\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"09-data-preparation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"source","theme":"cosmo","title":"Data Preparation","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}