---
title: "Business Understanding"
params:
  UpdateSimulation: FALSE
editor_options: 
  chunk_output_type: console
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## Project Name

**Increasing NYC Taxi Drivers Earnings**.

## Business Understanding Overview

The elements of the process are defined using a **SIPOC** diagram.

```{r parsermd-chunk-1, echo = FALSE}
DiagrammeR::grViz('
digraph SIPOC {
    rankdir=LR;
    node [shape=box];
    subgraph cluster_S {
        label="Suppliers";
        S1 [label="Gas Station"];
        S2 [label="Car Manufacturer"];
        S3 [label="Taxi Application"];
        S4 [label="Telecommunication\nCompany"];
        S5 [label="Smartphone Supplier"];
        S6 [label="Maintenance\nService Providers"];
    }
    subgraph cluster_I {
        label="Inputs";
        I1 [label="Gas"];
        I2 [label="Car"];
        I3 [label="Start\nLocation"];
        I4 [label="End\nLocation"];
        I5 [label="Internet"];
        I6 [label="Smartphone"];
        I7 [label="Customer\nRequests"];
    }
    subgraph cluster_P {
        label="Process";
        P1 [label="The customer requests a taxi"];
        P2 [label="the driver arrives at\nthe pick-up location"];
        P3 [label="The driver picks the customer up"];
        P4 [label="The driver drives to destination"];
        P5 [label="The driver leaves the customer\nat the end point"];
    }
    subgraph cluster_O {
        label="Outputs";
        O2 [label="Customer travel experience"];
        O3 [label="Customer transfer"];
        O4 [label="Payment"]
    }
    subgraph cluster_C {
        label="Customers";
        C1 [label="Taxi User"];
    }
    S1 -> I1 [style=invis];
    I1 -> P1 [style=invis];
    P1 -> O2 [style=invis];
    O2 -> C1 [style=invis];
    P1 -> P2 [constraint=false];
    P2 -> P3 [constraint=false];
    P3 -> P4 [constraint=false];
    P4 -> P5 [constraint=false];
}

')
```

## Business Objectives

### Problem Statement

Taxi drivers could increase their earnings by changing the strategy to select the trips to take, and zone and time to start working.

### Defining Business Metric

Based on the current information, we can say that our objective is to increase the **Daily Hourly Wage** received by each taxi driver defined by the following formula:

$$
\text{Daily Hourly Wage} = \frac{\text{Total Earnings}}{\text{Total Hours Worked}}
$$

### Business Success Criteria

Develop a model to increase NYC taxi drivers' hourly earnings by 20% through optimal trip selection.

### Project Scope

This project will be limited to Juno, Uber, Via and Lyft taxi drivers who work in New York City in trips that take place between any zone of Manhattan, Brooklyn or Queens (the more active ones).

### Stakeholders

-   Taxi drivers
-   Taxi companies
-   Customers
-   NYC Taxi and Limousine Commission

## Data to use

In this project, we will use a subset of the data available in the [TLC Trip Record Data](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page) from 2022 to 2023 for **High Volume For-Hire Vehicle** with the columns described below in the [data dictionary](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_hvfhs.pdf).

### Available Before Arriving at the Pick-Up Location

They will be used as the **predictors** to train the model.

| **Field Name** | **Description** |
|:-----------------------------------|:-----------------------------------|
| **hvfhs_license_num** | The TLC license number of the HVFHS base or business. As of September 2019, the HVFHS licensees are the following: <br> - HV0002: Juno <br> - HV0003: Uber <br> - HV0004: Via <br> - HV0005: Lyft |
| **wav_request_flag** | Did the passenger request a wheelchair-accessible vehicle (WAV)? (Y/N) |
| **wav_match_flag** | Did the trip occur in a wheelchair-accessible vehicle (WAV)? (Y/N) |
| **request_datetime** | Date/time when passenger requested to be picked up |
| **PULocationID** | TLC Taxi Zone in which the trip began |
| **DOLocationID** | TLC Taxi Zone in which the trip ended |
| **airport_fee** | \$2.50 for both drop off and pick up at LaGuardia, Newark, and John F. Kennedy airports |
| **base_passenger_fare** | Base passenger fare before tolls, tips, taxes, and fees |
| **trip_miles** | Total miles for passenger trip |
| **shared_request_flag** | Did the passenger agree to a shared/pooled ride, regardless of whether they were matched? (Y/N) |
| **shared_match_flag** | Did the passenger share the vehicle with another passenger who booked separately at any point during the trip? (Y/N) |

### Available After Ending the Trip

They can be used to create the **outcome variable** needed to be predicted by the model.

| **Field Name** | **Description** |
|:-----------------------------------|:-----------------------------------|
| **trip_time** | Total time in seconds for passenger trip |
| **driver_pay** | Total driver pay (not including tolls or tips and net of commission, surcharges, or taxes) |
| **tips** | Total amount of tips received from passenger |

## Defining Metric's Base Line

Defining the baseline based on this data is a challenge as the data doesn't have any *unique id* to make the estimation, but we can **run a simulation** to estimate its value with a confident interval.

### Simulation Assumptions

The simulation will be based on the following **assumptions** related to the taxi drivers:

1.  They can start to work:

    -   From any zone of Manhattan, Brooklyn or Queens (the more active ones)
    -   From any month, weekday or hour.

2.  The TLC license number (taxi company) needs to keep constant for all trips in workday.

3.  Only wheelchair-accessible vehicles can accept trips with that request.

4.  As we cannot estimate whether each zone have more active taxis than passengers we will assume that there is always more passengers than taxis and each taxi driver can **accept the first requested trip**.

5.  The taxis will find trips based on their time waiting and will take the first trip in their valid radius:

    -   0-1 Minute: Search within a 1-mile radius.

    -   1-3 Minutes: Expand search to a 3-mile radius if no trip is found.

    -   3-5 Minutes: Expand search to a 5-mile radius if still no trip is found.

    -   Keep adding 2 miles every two minutes until finding a trip.

6.  They have a 30 minutes break after 4 hours working once ending the current trip.

7.  They will take their last trip after working 8 hours, without taking into consideration the 30 minutes break.

::: {.callout-note title="Note - Code Quality"}
To make sure our simulation meets all those rules the created the `project.nyc.taxi::simulate_trips()` function with unit tests to ensure its accuracy, as you can see in [github](https://github.com/AngelFelizR/project.nyc.taxi/blob/master/tests/testthat/test-simulate_trips.R).
:::

### Running trips simulation

1.  Loading the functions to use.

```{r warning = FALSE, message = FALSE}
library(here)
library(scales)
library(ggplot2)
library(data.table)
library(lubridate)
library(infer)
library(DBI)
library(duckdb)
library(glue)

options(datatable.print.nrows = 15)
```

2.  Creating folders to save data on disk.

```{r}
if(!dir.exists(here("output"))) dir.create(here("output"))
if(!dir.exists(here("output/take-trip-fst"))) dir.create(here("output/take-trip-fst"))
if(!dir.exists(here("output/cache-data"))) dir.create(here("output/cache-data"))
```

3.  Creating a connection with DuckDB.

``` r
con <- dbConnect(duckdb(), dbdir = here("output/my-db.duckdb"))
```

4.  Importing the definition of each code zone.

```{r}
ZoneCodesRef <-
  fread(here("raw-data/taxi_zone_lookup.csv"),
        colClasses = c("integer",
                       "character",
                       "character",
                       "character"))
```

5.  As most of the trips take place between **Manhattan**, **Brooklyn** and **Queens**, let's list all possible combinations of related locations to use it as filter later.

```{r}
ZoneCodesFilter <-
  ZoneCodesRef[c("Manhattan", "Brooklyn", "Queens"), 
               on = "Borough",
               CJ(PULocationID = LocationID,
                  DOLocationID = LocationID)]
```

5.  Selecting at random the first trip of each simulation. It's important to know that even after setting the seed 3518 **the sample is not reproducible**, so we need to save the on disk to keep using the same data.

``` r
# Addig ZoneCodesFilters to db
dbWriteTable(con, "ZoneCodesFilter", ZoneCodesFilter)

# Sampling 60 trips from db
SimulationStartDayQuery <- "
SELECT t1.*
FROM NycTrips t1
INNER JOIN ZoneCodesFilter t2
  ON t1.PULocationID = t2.PULocationID AND
     t1.DOLocationID = t2.DOLocationID
WHERE t1.year = 2023
USING SAMPLE reservoir(60 ROWS) REPEATABLE (3518);
"
SimulationStartDay <- dbGetQuery(con, SimulationStartDayQuery)
setDT(SimulationStartDay)

# Saving results
fst::write_fst(SimulationStartDay, here("output/cache-data/SimulationStartDay.fst"))

pillar::glimpse(SimulationStartDay)
```

```{r echo=FALSE}
SimulationStartDay <-
  here("output/cache-data/SimulationStartDay.fst") |>
  fst::read_fst(as.data.table = TRUE)

pillar::glimpse(SimulationStartDay)
```

We can also confirm that the sample satisfy the initial restrictions:

-   All trips are from 2023.

```{r}
SimulationStartDay[, .N, year]
```

-   The trips begin on the expected boroughs.

```{r}
ZoneCodesRef[SimulationStartDay, 
             on = c("LocationID" = "PULocationID"),
             .N,
             by = "Borough"]
```

-   The trips end on the expected boroughs.

```{r}
ZoneCodesRef[SimulationStartDay, 
             on = c("LocationID" = "DOLocationID"),
             .N,
             by = "Borough"]
```

Now we can conclude that the initial data **satisfy the assumption 1**.

6.  Calculating the mean distance present from one location to other if it has **fewer than 7 miles**.

``` r
MeanDistanceQuery <- "
CREATE TABLE PointMeanDistance AS

-- Selecting all avaiable from trips that don't start and end at same point
WITH ListOfPoints AS (
  SELECT 
    t1.PULocationID,
    t1.DOLocationID,
    AVG(t1.trip_miles) AS trip_miles_mean
  FROM 
    NycTrips t1
  INNER JOIN
    ZoneCodesFilter t2
    ON t1.PULocationID = t2.PULocationID AND
       t1.DOLocationID = t2.DOLocationID
  WHERE
    t1.PULocationID <> t1.DOLocationID AND
    t1.year = 2023
  GROUP BY 
    t1.PULocationID, 
    t1.DOLocationID
  HAVING 
    AVG(t1.trip_miles) <= 7
),

-- Defining all available distances
ListOfPointsComplete AS (
  SELECT
    PULocationID,
    DOLocationID,
    trip_miles_mean
  FROM ListOfPoints
  UNION ALL
  SELECT
    DOLocationID AS PULocationID,
    PULocationID AS DOLocationID,
    trip_miles_mean
  FROM ListOfPoints
),
NumeredRows AS (
  SELECT
    PULocationID,
    DOLocationID,
    trip_miles_mean,
    row_number() OVER (PARTITION BY PULocationID, DOLocationID) AS n_row
  FROM ListOfPointsComplete
)

-- Selecting the first combination of distances
SELECT 
  PULocationID,
  DOLocationID,
  trip_miles_mean
FROM NumeredRows
WHERE n_row = 1
ORDER BY PULocationID, trip_miles_mean;
"

# Saving table on DB for simulation
dbExecute(con, MeanDistanceQuery)

# Saving the table as a file
PointMeanDistance <- dbGetQuery(con, "SELECT * FROM PointMeanDistance")
fst::write_fst(PointMeanDistance,here("output/cache-data/PointMeanDistance.fst"))
```

7.  Running the simulation.

``` r
SimulationHourlyWage <- project.nyc.taxi::simulate_trips(con, SimulationStartDay)
```

```{r echo=FALSE}
if(exists("SimulationHourlyWage")){
  fst::write_fst(SimulationHourlyWage, here("output/cache-data/SimulationHourlyWage.fst"))
}else{
  SimulationHourlyWage <- fst::read_fst(
    here("output/cache-data/SimulationHourlyWage.fst"),
    as.data.table = TRUE
  )
}
```

8.  Disconnecting from DB.

``` r
dbDisconnect(con, shutdown = TRUE)
```

9.  Showing simulation results.

```{r}
DailyHourlyWage <-
  SimulationHourlyWage[, .(`Daily Hourly Wage` = 
                             sum(sim_driver_pay + sim_tips) /
                             as.double(difftime(max(sim_dropoff_datetime), 
                                                min(sim_request_datetime),
                                                units = "hours"))),
                       by = "simulation_id"]


DailyHourlyWage |>
  ggplot()+
  geom_histogram(aes(`Daily Hourly Wage`),
                 bins = 10) +
  scale_x_continuous(breaks = breaks_width(10)) +
  theme_light()
```

### Defining a Condifence Interval

After simulating 60 days, we can use **bootstrap** to infer the distribution of the mean **Daily Hourly Wage** for any day in the year by following the next steps.

1.  Resample with replacement a new 60 days hourly wage 3,000 times and calculate the mean of each resample.

```{r parsermd-chunk-11}
set.seed(1586)

BootstrapHourlyWage <-
  specify(DailyHourlyWage,
          `Daily Hourly Wage` ~ NULL) |>
  generate(reps = 3000, type = "bootstrap") |>
  calculate(stat = "mean")

BootstrapHourlyWage
```

2.  Compute the 95% confident interval.

```{r parsermd-chunk-12}
BootstrapInterval <- 
  get_ci(BootstrapHourlyWage, 
         level = 0.95,
         type = "percentile")

BootstrapInterval
```

3.  Visualize the estimated distribution.

```{r parsermd-chunk-13}
visualize(BootstrapHourlyWage)+
  shade_ci(endpoints = BootstrapInterval,
           color = "#2c77BF",
           fill = "#2c77BF")+
  annotate(geom = "text",
           y = 400,
           x = c(BootstrapInterval[1L][[1L]] - 0.4,
                 BootstrapInterval[2L][[1L]] + 0.4),
           label = unlist(BootstrapInterval) |> comma(accuracy = 0.01))+
  labs(title = "Mean Hourly Wage Distribution",
       y = "Count")+
  theme_light()+
  theme(panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank(),
        plot.title = element_text(face = "bold"),
        axis.title.x = element_blank())
```

## Business Case

Based on the simulation's results we can confirm that the average earnings for a taxi driver per hour goes between `r round(BootstrapInterval[1L][[1L]], 2)` and `r round(BootstrapInterval[2L][[1L]], 2)`, but that doesn't represent the highest values observed on the simulation.

If we can check the simulation results we can confirm that a 25% of the simulated days presented earnings over the 60 dollars per hour.

```{r}
GoalRate <- 
  DailyHourlyWage$`Daily Hourly Wage` |>
  quantile(probs = 0.75) |>
  unname() |>
  round(2)

GoalRate
```

If we can apply a strategy that can move the `Daily Hourly Wage` to `r GoalRate` dollars per hour, assuming the the taxi driver works 5 days every week for 8 hours, that would mean a increase of **`r scales::dollar((GoalRate - BootstrapInterval[1L][[1L]]) * 8 * 5 * 4)` every month**.

## Opportunities

To improve the mean income of taxi drivers we can give guidelines to support the following decisions:

1.  **When and where to start working**
2.  **Accept or reject each individual trip request**

## Determining Data Mining Goals

1.  **When and where to start working**
    -   Create a regression model to predict `performance_per_hour` with:
        -   Target accuracy: RMSE \<= \$10
        -   Deploy via Shiny App Dashboard to show best results based on the positions provided on the training set
        -   Success metric: **5% increase** in average hourly earnings
2.  **Accept or reject trip requests**
    -   Create a classification model to evaluate trips with:
        -   Target accuracy: \> 80%
        -   Maximum 3-second prediction time
        -   Real-time deployment via Shiny App Dashboard and user input
        -   Success metric: **15% increase** in average hourly earnings
