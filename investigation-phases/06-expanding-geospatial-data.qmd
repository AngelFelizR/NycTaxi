---
title: "Expanding Geospatial Information"
editor_options: 
  chunk_output_type: console
---

## Problem description

Our target variable varies across zones. Merely providing an ID offers limited context for the models to differentiate between zones. Thus, we enrich the data with geospatial features derived from OpenStreetMap (OSM) to provide deeper insights into each zone.

## Strategy

1. Importing the taxi zone shapefile.

2. Retrieving borough boundaries for Queens, Brooklyn, and Manhattan using `osmdata::getbb()`.

3. Extract from OSM tags liked to below features:
   - `amenity`
   - `shop`
   - `office`
   - `tourism`
   - `public_transport`
   - `aeroway`
   - `emergency`
   - `sport`
   - `highway`
   - `landuse`
   
4. Join OSM features to each zone based on spatial overlap.

5. Count the number of places per region.

6. Get the length of roads per region.

7. Define the proportion `landuse` by tag of each region.

8. Normalize created feature.


## Coding

### Importing libraries

```{r}
library(here)
library(data.table)
library(sf)
library(tmap)
library(osmdata)

tmap_mode("view")

BoroughColors <- c(
  'Manhattan' = '#e41a1c',
  'Queens' = '#377eb8',
  'Brooklyn'= '#4daf4a'
)

BoroughSelected <- names(BoroughColors)

FeaturesToGet <- c(
   "amenity",
   "shop",
   "office",
   "tourism",
   "public_transport",
   "aeroway",
   "emergency",
   "sport",
   "highway",
   "landuse"
)

```

### Importing shapes

```{r}
ZonesShapes <-
  read_sf(here("raw-data/taxi_zones/taxi_zones.shp")) |>
  subset(borough %in% BoroughSelected)
```

### Defining bounding box

```{r}
bb_box <-
  lapply(X = paste0(BoroughSelected, ", NY"),
         FUN = osmdata::getbb) |>
  do.call(what = "cbind") |>
  (\(x) cbind(min = apply(x, 1, min),
              max = apply(x, 1, max)))()
```

### Plotting resutls

```{r}
project.nyc.taxi::plot_box(bb_box) +
  tm_shape(ZonesShapes) +
  tm_polygons(fill = "borough",
              fill.scale = tm_scale_categorical(values = BoroughColors),
              fill_alpha = 0.6)
```

### Getting data from OpenStreetMap

```r
keep_feature_value <- function(osm_list, key) {
  
  shape_list =
    c("osm_points",
      "osm_lines",
      "osm_polygons",
      "osm_multilines",
      "osm_multipolygons")
  
  for(shape_i in shape_list){
    
    if(is.null(osm_list[[shape_i]])){
      next
    }
    
    # Removing cases without key value
    osm_list[[shape_i]] =
      subset(osm_list[[shape_i]],
             !is.na(get(key, inherits = FALSE)),
             select = c("name", key))
    
    # Fixing not valid geometries
    not_valid_cases = !sf::st_is_valid(osm_list[[shape_i]])
    if(sum(not_valid_cases) > 0) {
      osm_list[[shape_i]] = sf::st_make_valid(osm_list[[shape_i]])
    }
    
  }
  
  return(osm_list)
}


for(feature_i in FeaturesToGet){
  
  OsmData <-
    opq(bb_box) |>
    add_osm_feature(feature_i) |>
    osmdata_sf() |>
    keep_feature_value(feature_i)
  
  saveRDS(OsmData, 
          here(sprintf("output/cache-data/feature_%s.rds", feature_i)), 
          compress = "xz")
}
```

### Consolidating data

```r
tidy_osm_data <- function(osm_sf, crs = NULL) {
  
  shape_list =
    c("osm_points",
      "osm_lines",
      "osm_polygons",
      "osm_multilines",
      "osm_multipolygons")
  
  for(shape_i in shape_list) {
    
    osm_sf[[shape_i]] =
      osm_sf[[shape_i]] |>
      dplyr::select(-osm_id) |>
      tidyr::pivot_longer(!c("name", "geometry"),
                          names_to = "feature",
                          values_drop_na = TRUE)
    
    if(!is.null(crs)){
      osm_sf[[shape_i]] = st_transform(osm_sf[[shape_i]], crs = crs)
    }
    
  }
  
  return(osm_sf)
  
}

OsmDataComplete <-
  FeaturesToGet |>
  sapply(FUN = \(x) here(sprintf("output/cache-data/feature_%s.rds", x))) |>
  lapply(FUN = readRDS) |>
  do.call(what = "c") |>
  tidy_osm_data(crs = st_crs(ZonesShapes)$epsg)

qs2::qs_save(OsmDataComplete, 
             here("output/cache-data/OsmDataComplete.qs"))
```

```{r}
#| echo: FALSE

OsmDataComplete <- qs2::qs_read(here("output/cache-data/OsmDataComplete.qs"))

OsmDataComplete
```

### Jonning data

1. Joining elements **contained** by each zone.

```r
PointsWithinZones <-
  st_join(OsmDataComplete$osm_points,
          ZonesShapes,
          join = st_within,
          left = FALSE)


LinesWithinZones <-
  OsmDataComplete$osm_lines |>
  st_join(y = ZonesShapes,
          join = st_within,
          left = FALSE)

MultiLinesWithinZones <-
  OsmDataComplete$osm_multilines |>
  st_join(y = ZonesShapes,
          join = st_within,
          left = FALSE)
          
PolygonWithinZones <-
  OsmDataComplete$osm_polygons |>
  st_join(y = ZonesShapes,
          join = st_within,
          left = FALSE)

MultiPolygonWithinZones <-
  st_make_valid(OsmDataComplete$osm_multipolygons) |>
  st_join(y = ZonesShapes,
          join = st_within,
          left = FALSE)
```

Now we can save the save the results.

```r
qs2::qs_save(PointsWithinZones, 
             here("output/cache-data/PointsWithinZones.qs"))

qs2::qs_save(LinesWithinZones, 
             here("output/cache-data/LinesWithinZones.qs"))

qs2::qs_save(MultiLinesWithinZones, 
             here("output/cache-data/MultiLinesWithinZones.qs"))

qs2::qs_save(PolygonWithinZones, 
             here("output/cache-data/PolygonWithinZones.qs"))

qs2::qs_save(MultiPolygonWithinZones, 
             here("output/cache-data/MultiPolygonWithinZones.qs"))
```

```{r}
#| echo: false

PointsWithinZones <-
  qs2::qs_read(here("output/cache-data/PointsWithinZones.qs"))

LinesWithinZones <-
  qs2::qs_read(here("output/cache-data/LinesWithinZones.qs"))

MultiLinesWithinZones <-
  qs2::qs_read(here("output/cache-data/MultiLinesWithinZones.qs"))

PolygonWithinZones <-
  qs2::qs_read(here("output/cache-data/PolygonWithinZones.qs"))

MultiPolygonWithinZones <-
  qs2::qs_read(here("output/cache-data/MultiPolygonWithinZones.qs"))
```

2. Joining lines that are **partially contained** for each zone. 

```r
LinesInSeveralZones <-
  OsmDataComplete$osm_lines |>
  st_join(y = ZonesShapes,
          join = st_crosses,
          left = FALSE)

MultiLinesInSeveralZones <-
  OsmDataComplete$osm_multilines |>
  st_join(y = ZonesShapes,
          join = st_crosses,
          left = FALSE)

PolygonInSeveralZones <-
  OsmDataComplete$osm_polygons |>
  st_join(y = ZonesShapes,
          join = st_overlaps,
          left = FALSE)

MultiPolygonInSeveralZones <-
  st_make_valid(OsmDataComplete$osm_multipolygons) |>
  st_join(y = ZonesShapes,
          join = st_overlaps,
          left = FALSE)
```


All making all that operations we need to save the data for future use.

```r
qs2::qs_save(LinesInSeveralZones, 
             here("output/cache-data/LinesInSeveralZones.qs"))

qs2::qs_save(MultiLinesInSeveralZones, 
             here("output/cache-data/MultiLinesInSeveralZones.qs"))
             
qs2::qs_save(PolygonInSeveralZones, 
             here("output/cache-data/PolygonInSeveralZones.qs"))

qs2::qs_save(MultiPolygonInSeveralZones, 
             here("output/cache-data/MultiPolygonInSeveralZones.qs"))
```

```{r}
#| echo: false

LinesInSeveralZones <-
  qs2::qs_read(here("output/cache-data/LinesInSeveralZones.qs"))

MultiLinesInSeveralZones <-
  qs2::qs_read(here("output/cache-data/MultiLinesInSeveralZones.qs"))

PolygonInSeveralZones <-
  qs2::qs_read(here("output/cache-data/PolygonInSeveralZones.qs"))

MultiPolygonInSeveralZones <-
  qs2::qs_read(here("output/cache-data/MultiPolygonInSeveralZones.qs"))
```

#### Confirming results

Let's start checking feature fully contained on each location.

```{r}
ZoneToChech <- 191L

ZonesShapesToCheck <- subset(ZonesShapes, LocationID == ZoneToChech)
LinesWithinZonesToCheck  <- subset(LinesWithinZones, LocationID == ZoneToChech)
PolygonWithinZonesToCheck <- subset(PolygonWithinZones, LocationID == ZoneToChech)

tm_shape(ZonesShapesToCheck)+
  tm_polygons(fill = "grey") +
  tm_shape(LinesWithinZonesToCheck) +
  tm_lines(col = "feature") +
  tm_shape(PolygonWithinZonesToCheck) +
  tm_polygons(fill = "feature")
```


Now we can confirm the cases that aren't fully contained.

```{r}
LinesInSeveralZonesToCheck  <- subset(LinesInSeveralZones, LocationID == ZoneToChech)
PolygonInSeveralZonesToCheck <- subset(PolygonInSeveralZones, LocationID == ZoneToChech)

tm_shape(ZonesShapesToCheck)+
  tm_polygons(fill = "grey") +
  tm_shape(LinesInSeveralZonesToCheck) +
  tm_lines(col = "blue") +
  tm_shape(PolygonInSeveralZonesToCheck) +
  tm_polygons(fill = "feature")
```


### Changing the

```{r}
apply_intersection_by_id <- function(features,
                                     shapes){
  
  intersection_by_id = function(id, features, shapes) {
    
    features_sub = subset(features, LocationID == id)
    shapes_sub_geo = subset(shapes, LocationID == id) |> st_geometry()
    
    new_df = st_intersection(features_sub, shapes_sub_geo)
    
    return(new_df)
  }
  
  new_df =
    lapply(unique(features$LocationID),
           FUN = intersection_by_id,
           features = features,
           shapes = shapes) |>
    do.call(what = "rbind")
  
  return(new_df)
  
}

LinesInSeveralZonesCropped <- apply_intersection_by_id(LinesInSeveralZones, ZonesShapes)
PolygonInSeveralZonesCropped <- apply_intersection_by_id(PolygonInSeveralZones, ZonesShapes)
```


#### Confiming crop application


```{r}
LinesInSeveralZonesCroppedToCheck  <- subset(LinesInSeveralZonesCropped, LocationID == ZoneToChech)
PolygonInSeveralZonesCroppedToCheck <- subset(PolygonInSeveralZonesCropped, LocationID == ZoneToChech)

tm_shape(ZonesShapesToCheck)+
  tm_polygons(fill = "grey") +
  tm_shape(LinesInSeveralZonesCroppedToCheck) +
  tm_lines(col = "blue") +
  tm_shape(PolygonInSeveralZonesCroppedToCheck) +
  tm_polygons(fill = "feature")
```

```r
temp = tidycensus::load_variables(2021, "acs5")

setDT(temp)

temp[c("MEANS OF TRANSPORTATION TO WORK",
       "MEANS OF TRANSPORTATION TO WORK BY TIME OF DEPARTURE TO GO TO WORK",
       "MEANS OF TRANSPORTATION TO WORK BY TRAVEL TIME TO WORK",
       "AGGREGATE TRAVEL TIME TO WORK (IN MINUTES) OF WORKERS BY MEANS OF TRANSPORTATION TO WORK",
       "MEANS OF TRANSPORTATION TO WORK BY VEHICLES AVAILABLE",
       
       "MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2021 INFLATION-ADJUSTED DOLLARS) BY AGE OF HOUSEHOLDER"),
     on = "concept",
     j = !c("concept")
][label != "Estimate!!Total:"]

# Geographical Mobility - B07203_008
temp[name %like% "^[A-Z]\\d+_"] |> View()

temp[name %like% "^B08124_"
     & label %ilike% ".+:.+:$", View(.SD)]
```

