---
title: "Expanding Geospatial Information"
editor_options: 
  chunk_output_type: console
---

## Problem description

Our target variable varies across zones. Merely providing an ID offers limited context for the models to differentiate between zones. Thus, we enrich the data with geospatial features derived from OpenStreetMap (OSM) to provide deeper insights into each zone.

## Strategy

1. Importing the taxi zone shapefile.

2. Retrieving borough boundaries for Queens, Brooklyn, and Manhattan using `osmdata::getbb()`.

3. Extract from OSM tags liked to below features:
   - `amenity`
   - `shop`
   - `office`
   - `tourism`
   - `public_transport`
   - `aeroway`
   - `emergency`
   - `sport`
   - `highway`
   - `landuse`
   
4. Join OSM features to each zone based on spatial overlap.

5. Count the number of places per region.

6. Get the length of roads per region.

7. Define the proportion `landuse` by tag of each region.

8. Normalize created feature.


## Coding

### Importing libraries

```{r}
library(here)
library(data.table)
library(sf)
library(tmap)
library(osmdata)

tmap_mode("view")

BoroughColors <- c(
  'Manhattan' = '#e41a1c',
  'Queens' = '#377eb8',
  'Brooklyn'= '#4daf4a'
)

BoroughSelected <- names(BoroughColors)

FeaturesToGet <- c(
   "amenity",
   "shop",
   "office",
   "tourism",
   "public_transport",
   "aeroway",
   "emergency",
   "sport",
   "highway",
   "landuse"
)

```

### Importing shapes

```{r}
ZonesShapes <-
  read_sf(here("raw-data/taxi_zones/taxi_zones.shp")) |>
  filter(borough %in% BoroughSelected)
```

### Defining bounding box

```{r}
bb_box <-
  lapply(X = paste0(BoroughSelected, ", NY"),
         FUN = osmdata::getbb) |>
  do.call(what = "cbind") |>
  (\(x) cbind(min = apply(x, 1, min),
              max = apply(x, 1, max)))()
```

### Plotting resutls

```{r}
project.nyc.taxi::plot_box(bb_box) +
  tm_shape(ZonesShapes) +
  tm_polygons(fill = "borough",
              fill.scale = tm_scale_categorical(values = BoroughColors),
              fill_alpha = 0.6)
```

### Getting data from OpenStreetMap

```r
keep_feature_value <- function(osm_list, key) {
  
  shape_list =
    c("osm_points",
      "osm_lines",
      "osm_polygons",
      "osm_multilines",
      "osm_multipolygons")
  
  for(shape_i in shape_list){
    
    if(is.null(osm_list[[shape_i]])){
      next
    }
    
    # Removing cases without key value
    osm_list[[shape_i]] =
      subset(osm_list[[shape_i]],
             !is.na(get(key, inherits = FALSE)),
             select = c("name", key))
    
    # Fixing not valid geometries
    not_valid_cases = !sf::st_is_valid(osm_list[[shape_i]])
    if(sum(not_valid_cases) > 0) {
      osm_list[[shape_i]] = sf::st_make_valid(osm_list[[shape_i]])
    }
    
  }
  
  return(osm_list)
}


for(feature_i in FeaturesToGet){
  
  OsmData <-
    opq(bb_box) |>
    add_osm_feature(feature_i) |>
    osmdata_sf() |>
    keep_feature_value(feature_i)
  
  saveRDS(OsmData, 
          here(sprintf("output/cache-data/feature_%s.rds", feature_i)), 
          compress = "xz")
}
```

### Consolidating data

```r
tidy_osm_data <- function(osm_sf, crs = NULL) {
  
  shape_list =
    c("osm_points",
      "osm_lines",
      "osm_polygons",
      "osm_multilines",
      "osm_multipolygons")
  
  for(shape_i in shape_list) {
    
    osm_sf[[shape_i]] =
      osm_sf[[shape_i]] |>
      dplyr::select(-osm_id) |>
      tidyr::pivot_longer(!c("name", "geometry"),
                          names_to = "feature",
                          values_drop_na = TRUE)
    
    if(!is.null(crs)){
      osm_sf[[shape_i]] = st_transform(osm_sf[[shape_i]], crs = crs)
    }
    
  }
  
  return(osm_sf)
  
}

OsmDataComplete <-
  FeaturesToGet |>
  sapply(FUN = \(x) here(sprintf("output/cache-data/feature_%s.rds", x))) |>
  lapply(FUN = readRDS) |>
  do.call(what = "c") |>
  tidy_osm_data(crs = st_crs(ZonesShapes)$epsg)

qs2::qs_save(OsmDataComplete, 
             here("output/cache-data/OsmDataComplete.rds"))
```

```{r}
#| echo: FALSE

if(!exists("OsmDataComplete")) {
  OsmDataComplete <- qs2::qs_read(here("output/cache-data/OsmDataComplete.qs"))
}

OsmDataComplete
```

### Jonning data

```{r}
PointsWithinZones <-
  st_join(OsmDataComplete$osm_points,
          ZonesShapes,
          join = st_within,
          left = FALSE)


LinesWithinZones <-
  OsmDataComplete$osm_lines |>
  st_join(y = ZonesShapes,
          join = st_within,
          left = FALSE)

LinesInSeveralZones <-
  OsmDataComplete$osm_lines |>
  st_join(y = ZonesShapes,
          join = st_crosses,
          left = FALSE,
          largest = TRUE)

```

```{r}
qs2::qs_save(OsmDataComplete, here("output/cache-data/OsmDataComplete.qs"))
qs2::qs_save(PointsWithinZones, "output/cache-data/PointsWithinZones.qs")
qs2::qs_save(LinesWithinZones, "output/cache-data/LinesWithinZones.qs")
qs2::qs_save(LinesInSeveralZones, "output/cache-data/LinesInSeveralZones.qs")
```



```{r}
data.table::setDT(temp)

temp[, .N,
     c("LocationID", "feature", "value")] |>
data.table::dcast(formula = LocationID ~ feature + value,
                  value.var = "N",
                  fill = 0L)
```


