---
title: "Data Preparation"
editor_options: 
  chunk_output_type: console
execute:
  message: false
  warning: false
---

```{r}
## Tools for modeling
library(tidymodels)

## To manage relative paths
library(here)

## To transform data that fits in RAM
library(data.table)
library(lubridate)
library(timeDate)

## Custom functions
devtools::load_all()
```

## Importing data

```{r}
AcsVariablesByZoneId <- fst::read_fst(
  here("output/AcsVariablesByZoneId.fst"),
  as.data.table = TRUE
)

OmsDensityFeatures <- fst::read_fst(
  here("output/OmsDensityFeatures.fst"),
  as.data.table = TRUE
)

ZoneCodesRef <-
  fread(here("raw-data/taxi_zone_lookup.csv"),
        select = c("LocationID" = "integer",
                   "Borough" = "character",
                   "service_zone" = "character"))

TrainingSample <-
  here("output/take-trip-fst") |>
  list.files(full.names = TRUE) |>
  (\(x) data.table(full_path = x,
                   n_char = nchar(basename(x)),
                   name = basename(x)))() |>
  (\(dt) dt[order(n_char, name), full_path])() |>
  head(12L) |>
  lapply(FUN = fst::read_fst,
         columns = c("take_current_trip",
                     "PULocationID",
                     "DOLocationID",
                     "wav_match_flag",
                     "hvfhs_license_num",
                     "trip_miles",
                     "trip_time",
                     "request_datetime"),
         as.data.table = TRUE) |>
  rbindlist()
```

## Defining all features

```{r}
AllFeaturesRecipe <-
  
  # Starting Recipe
  recipe(take_current_trip ~ ., 
         data = TrainingSample) |>
  
  # Selecting variables over 2 min
  step_filter(trip_time >= (60 * 2)) |>
  
  # Adding Geospatial Data
  step_join_geospatial_features(ends_with("LocationID"),
                                spatial_features = ZoneCodesRef,
                                col_prefix = c("DO", "PU")) |>
  step_join_geospatial_features(ends_with("LocationID"),
                                spatial_features = AcsVariablesByZoneId,
                                col_prefix = c("DO", "PU")) |>
  step_join_geospatial_features(ends_with("LocationID"),
                                spatial_features = OmsDensityFeatures,
                                col_prefix = c("DO", "PU")) |>
  
  # Transforming String
  step_string2factor(all_string_predictors()) |>
  
  # Daily cycle
  step_harmonic(request_datetime, 
                frequency = 1,
                cycle_size = 3600*24, 
                keep_original_cols = TRUE) |>
  step_rename(request_datetime_sin_daily = request_datetime_sin_1,
              request_datetime_cos_daily = request_datetime_cos_1) |>
  
  # Weekly cycle
  step_harmonic(request_datetime, 
                frequency = 1, 
                cycle_size = 3600*24*7, 
                keep_original_cols = TRUE) %>%
  step_rename(request_datetime_sin_weekly = request_datetime_sin_1,
              request_datetime_cos_weekly = request_datetime_cos_1) |>
  
  # Extracting additional information
  step_date(request_datetime,
            features = c("year",
                         "week",
                         "decimal",
                         "semester", 
                         "quarter",
                         "doy",
                         "dow",
                         "mday",
                         "month")) |>
  
  step_holiday(request_datetime,
               holidays = c('USChristmasDay',
                            'USColumbusDay',
                            'USCPulaskisBirthday',
                            'USDecorationMemorialDay',
                            'USElectionDay',
                            'USGoodFriday',
                            'USInaugurationDay',
                            'USIndependenceDay',
                            'USJuneteenthNationalIndependenceDay',
                            'USLaborDay',
                            'USLincolnsBirthday',
                            'USMemorialDay',
                            'USMLKingsBirthday',
                            'USNewYearsDay',
                            'USPresidentsDay',
                            'USThanksgivingDay',
                            'USVeteransDay',
                            'USWashingtonsBirthday')) |>
  
  step_mutate(.pkgs = c("data.table", "lubridate", "timeDate"),
              
              company = fcase(hvfhs_license_num == "HV0002", "Juno",
                              hvfhs_license_num == "HV0003", "Uber",
                              hvfhs_license_num == "HV0004", "Via",
                              hvfhs_license_num == "HV0005", "Lyft") |> as.factor(),
              
              request_datetime_am = am(request_datetime) |> as.integer(),
              request_datetime_pm = pm(request_datetime) |> as.integer(),
              
              `Days to USChristmasDay` = difftime(USChristmasDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USColumbusDay` = difftime(USColumbusDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USCPulaskisBirthday` = difftime(USCPulaskisBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USDecorationMemorialDay` = difftime(USDecorationMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USElectionDay` = difftime(USElectionDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USGoodFriday` = difftime(USGoodFriday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USInaugurationDay` = difftime(USInaugurationDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USIndependenceDay` = difftime(USIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USJuneteenthNationalIndependenceDay` = difftime(USJuneteenthNationalIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USLaborDay` = difftime(USLaborDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USLincolnsBirthday` = difftime(USLincolnsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USMemorialDay` = difftime(USMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USMLKingsBirthday` = difftime(USMLKingsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USNewYearsDay` = difftime(USNewYearsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USPresidentsDay` = difftime(USPresidentsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USThanksgivingDay` = difftime(USThanksgivingDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USVeteransDay` = difftime(USVeteransDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USWashingtonsBirthday` = difftime(USWashingtonsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer()) |>
  
  
  # Removing variable extracted
  step_rm(ends_with(c("LocationID","request_datetime", "hvfhs_license_num"))) |>

  # Making transformations
  step_nzv(all_predictors()) |>
  step_dummy(all_nominal_predictors()) |>
  step_scale(all_numeric_predictors())

```

```{r}
TransformedData <-
  AllFeaturesRecipe |>
  prep() |>
  juice()
```

```{r}
library(corrr)

setDT(TransformedData)

correlate(TransformedData[, !c("take_current_trip")]) |>
  shave() |>
  stretch(na.rm = TRUE) |>
  transform(abs_r = abs(r)) |>
  ggplot(aes(abs_r)) +
  stat_ecdf(linewidth = 1) +
  scale_x_continuous(breaks = scales::breaks_width(0.1),
                     labels = scales::label_percent(accuracy = 1)) +
  scale_y_continuous(breaks = scales::breaks_width(0.1),
                     labels = scales::label_percent(accuracy = 1)) +
  theme_minimal(base_size = 12) +
  theme(panel.grid.minor = element_blank())
```

```{r}
correlate(TransformedData) |>
  focus(take_current_trip)
  shave() |>
  stretch(na.rm = TRUE) |>
  transform(abs_r = abs(r)) |>
  ggplot(aes(abs_r)) +
  stat_ecdf(linewidth = 1) +
  scale_x_continuous(breaks = scales::breaks_width(0.1),
                     labels = scales::label_percent(accuracy = 1)) +
  scale_y_continuous(breaks = scales::breaks_width(0.1),
                     labels = scales::label_percent(accuracy = 1)) +
  theme_minimal(base_size = 12) +
  theme(panel.grid.minor = element_blank())
```


```r

devtools::load_all()

# Starting Recipe
recipe(a ~ b, 
       data = data.frame(a = 1:2, b = 4:5)) |>
  step_join_geospatial_features(b,
                                spatial_features = data.frame(b = 4:5,
                                                              h = c("a", "b")),
                                role = "predictor") |>
  step_string2factor(all_nominal_predictors()) |>
  prep() |>
  juice() |>
  pillar::glimpse()


# Starting Recipe
recipe(a ~ DO_b + PU_b, 
       data = data.frame(a = 1:2, DO_b = 4:5, PU_b = 5:4)) |>
  step_join_geospatial_features(ends_with("_b"),
                                spatial_features = data.frame(b = 4:5,
                                                              h = c("a", "b")),
                                col_prefix = c("DO_", "PU_")) |>
  step_string2factor(all_nominal_predictors()) |>
  prep() |>
  juice() |>
  pillar::glimpse()
```


