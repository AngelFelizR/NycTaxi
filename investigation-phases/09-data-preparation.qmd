---
title: "Data Preparation"
editor_options: 
  chunk_output_type: console
execute:
  message: false
  warning: false
---

```{r}
## Tools for modeling
library(tidymodels)

## To manage relative paths
library(here)

## To transform data that fits in RAM
library(data.table)
library(lubridate)
library(timeDate)

## Custom functions
devtools::load_all()
```

```{r}
AcsVariablesByZoneId <- fst::read_fst(
  here("output/AcsVariablesByZoneId.fst"),
  as.data.table = TRUE
)

OmsDensityFeatures <- fst::read_fst(
  here("output/OmsDensityFeatures.fst"),
  as.data.table = TRUE
)

ZoneCodesRef <-
  fread(here("raw-data/taxi_zone_lookup.csv"),
        select = c("LocationID" = "integer",
                   "Borough" = "character",
                   "service_zone" = "character"))

TrainingSample <-
  here("output/take-trip-fst") |>
  list.files(full.names = TRUE) |>
  (\(x) data.table(full_path = x,
                   n_char = nchar(basename(x)),
                   name = basename(x)))() |>
  (\(dt) dt[order(n_char, name), full_path])() |>
  head(12L) |>
  lapply(FUN = fst::read_fst,
         columns = c("take_current_trip",
                     # trip_value = tips + driver_pay
                     #"tips",
                     #"driver_pay",
                     "PULocationID",
                     "DOLocationID",
                     "wav_match_flag",
                     "hvfhs_license_num",
                     "trip_miles",
                     "trip_time",
                     "request_datetime"),
         as.data.table = TRUE) |>
  rbindlist() |>
  (\(dt) dt[trip_time >= (60 * 2)] )()
```

```{r}
TrainingSample[ZoneCodesRef,
               on = c("PULocationID" = "LocationID"),
               `:=`(PUBorough = Borough,
                    PUServiceZone = service_zone)]


TrainingSample[ZoneCodesRef,
               on = c("DOLocationID" = "LocationID"),
               `:=`(DOBorough = Borough,
                    DOServiceZone = service_zone)]

TrainingSample <-
  setnames(copy(OmsDensityFeatures),
           paste0("PU", names(OmsDensityFeatures))
  )[TrainingSample,
    on = "PULocationID"]

TrainingSample <-
  setnames(copy(OmsDensityFeatures),
           paste0("DO", names(OmsDensityFeatures))
  )[TrainingSample,
    on = "DOLocationID"]

TrainingSample <-
  setnames(copy(AcsVariablesByZoneId),
           paste0("PU", names(AcsVariablesByZoneId))
  )[TrainingSample,
    on = "PULocationID"]

TrainingSample <-
  setnames(copy(AcsVariablesByZoneId),
           paste0("DO", names(AcsVariablesByZoneId))
  )[TrainingSample,
    on = "DOLocationID"]

```


```{r}
# timeDate::listHolidays("US") |>
#   (\(x) paste0("`Days to ", x, "` = ", 
#                "difftime(", x,"(year(request_datetime)), request_datetime, units = 'days')",
#                " |> as.integer()") )() |>
#   paste0(collapse = ",\n") |>
#   cat()

TimeRecipe <-
  recipe(take_current_trip ~ ., data = TrainingSample) |>
  
  # Daily cycle
  step_harmonic(request_datetime, 
                frequency = 1,
                cycle_size = 3600*24, 
                keep_original_cols = TRUE) |>
  step_rename(request_datetime_sin_daily = request_datetime_sin_1,
              request_datetime_cos_daily = request_datetime_cos_1) |>
  
  # Weekly cycle
  step_harmonic(request_datetime, 
                frequency = 1, 
                cycle_size = 3600*24*7, 
                keep_original_cols = TRUE) %>%
  step_rename(request_datetime_sin_weekly = request_datetime_sin_1,
              request_datetime_cos_weekly = request_datetime_cos_1) |>
  
  # Extracting additional information
  step_date(request_datetime,
            features = c("year",
                         "week",
                         "decimal",
                         "semester", 
                         "quarter",
                         "doy",
                         "dow",
                         "mday",
                         "month")) |>
  step_holiday(request_datetime,
               holidays = c('USChristmasDay',
                            'USColumbusDay',
                            'USCPulaskisBirthday',
                            'USDecorationMemorialDay',
                            'USElectionDay',
                            'USGoodFriday',
                            'USInaugurationDay',
                            'USIndependenceDay',
                            'USJuneteenthNationalIndependenceDay',
                            'USLaborDay',
                            'USLincolnsBirthday',
                            'USMemorialDay',
                            'USMLKingsBirthday',
                            'USNewYearsDay',
                            'USPresidentsDay',
                            'USThanksgivingDay',
                            'USVeteransDay',
                            'USWashingtonsBirthday')) |>
  step_mutate(company = fcase(hvfhs_license_num == "HV0002", "Juno",
                              hvfhs_license_num == "HV0003", "Uber",
                              hvfhs_license_num == "HV0004", "Via",
                              hvfhs_license_num == "HV0005", "Lyft"),
              
              
              request_datetime_am = am(request_datetime),
              request_datetime_pm = pm(request_datetime),
              `Days to USChristmasDay` = difftime(USChristmasDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USColumbusDay` = difftime(USColumbusDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USCPulaskisBirthday` = difftime(USCPulaskisBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USDecorationMemorialDay` = difftime(USDecorationMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USElectionDay` = difftime(USElectionDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USGoodFriday` = difftime(USGoodFriday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USInaugurationDay` = difftime(USInaugurationDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USIndependenceDay` = difftime(USIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USJuneteenthNationalIndependenceDay` = difftime(USJuneteenthNationalIndependenceDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USLaborDay` = difftime(USLaborDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USLincolnsBirthday` = difftime(USLincolnsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USMemorialDay` = difftime(USMemorialDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USMLKingsBirthday` = difftime(USMLKingsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USNewYearsDay` = difftime(USNewYearsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USPresidentsDay` = difftime(USPresidentsDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USThanksgivingDay` = difftime(USThanksgivingDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USVeteransDay` = difftime(USVeteransDay(year(request_datetime)), request_datetime, units = 'days') |> as.integer(),
              `Days to USWashingtonsBirthday` = difftime(USWashingtonsBirthday(year(request_datetime)), request_datetime, units = 'days') |> as.integer())


TrainingSampleZonesTime <-
  prep(TimeRecipe) |>
  bake(new_data = NULL)

glimpse(TrainingSampleZonesTime)
```